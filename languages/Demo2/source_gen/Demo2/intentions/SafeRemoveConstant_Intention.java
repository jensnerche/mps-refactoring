package Demo2.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class SafeRemoveConstant_Intention extends BaseIntention implements Intention {
  public SafeRemoveConstant_Intention() {
  }

  public String getConcept() {
    return "Demo2.structure.Constant";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Safely Remove Constant";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    Iterable<SNode> allReferences = ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(node, "Demo2.structure.Constants", false, false), "Demo2.structure.ConstantReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "original", false) == node;
      }
    });
    Sequence.fromIterable(allReferences).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNodeOperations.replaceWithAnother(it, SNodeOperations.copyNode(SLinkOperations.getTarget(node, "initializer", true)));
      }
    });
    SNodeOperations.deleteNode(node);
  }

  public String getLocationString() {
    return "Demo2.intentions";
  }
}
